// TODO
Database:
    - Paging to improve large data performance
        - https://developer.android.com/training/data-storage/room/accessing-data#paging-integration
    - remove app modules dependency on Database models?
        - may require remapping lists data from one type to another unless smarter decisions are made
Add Article:
    - ML Kit: Image labelling
    - Primary / Secondary color classifications?
    - Add to ensemble?
    - Wait for ML Model to download? Inform user that they need internet?
Ensemble Detail:
    - Add new article?
Article Detail:
    - Click to minimize UI elements
Aesthetics:
    - Lottie animations?
    - Vulkan / OpenGL fun?
README.md:
    - Updated conventions
    - Updated screenshots
Dependencies:
    - Remove compose navigation safe args?
Testing:
    - Viewmodels?
    - Expanded repository tests?
    - Database migrations?
Ensembles:
    - Composite ensembles?
        - Exclusive: #Goth & #Tops
        - Inclusive: #HealthGoth | #Hiking
Features:
    - Collage
    - Share!
Multiple Form Factor Support:
    - AddArticlesScreen [COMPLETED]
    - NavigationRail [COMPLETED]
    - NavRail [COMPLETED]
    - Ensembles List / Ensemble Detail for tablets
Articles:
    - thumbnails with random "shimmer"/"rotation"
    - multiple select and add to ensembles
        - needs to also be removed
        - might not be worth as valuable as you can get away with similar functionality on the ensemble detail screen
App-wide UI:
    - Explicit to Screen animations
Tooling:
    - UI Catalog
Export:
    - It seems like exporting image as a PNG is large (9.1MB+ for a 2650x2645 record!), investigate lowering this value.
    - Loading indicator? Or is disabled export button enough?
Compose Navigation:
    - Enable a more robust back stack
        - Ensure the proper navigation UI element is highlighted
        - Ensure that back history is wiped on "Delete All Data"
Refactor:
    - ViewModels should hold a single general UiState instead of individual values
Bugs:
    - Out of Memory (OOM) crash (or silent PROCESS ENDED while app is in the background due to camera contract) when processing an image in AddArticleScreen
        - Seen easily running application on an Motorola Z Play, 3GB RAM, API 26
        - Silent PROCESS ENDED is easy to reproduce on Samsung Galazy A23 if you repeatedly take pictures to catalog articles (occurs within 2-7 attempts usually)
        - OOM stems from java.nio.HeapFloatBuffer when called in com.google.mlkit.vision.segmentation.subject.internal
        - Although com.inasweaterpoorlyknit.core.ml.image.SegmentedImage contains multiple bitmaps and large integer arrays, it seems like the bulk of memory is coming from native allocations from ML Kit
            - Profiling has shown <150MB allocations on the Kotlin side and >1.3GB allocations on the native side
                - Deallocations obviously matter, but 150MB is not going to cause an OOM exception
                - This does *NOT* mean that SegmentedImage cannot or should not have it's memory optimized. But it is not the core issue.
        - CacheManager::trimMemory(20) or similar logging messages can usually be seen before a crash
        - Potential Solutions:
            - Reduce image resolution
            - Reduce image resolution that is sent to ML Kit and interpolated reduced resolution data to full resolution image
    - During screen transitions, the previous screen is still interactable?
    - FTS is imperfect sometimes shows irrelevant results on first character
        - Reproduce: Type one random character in search bar. Sometimes show unrelated results. Have seen unrelated results on pairs of 2 characters.
        - Maybe expected due to efficient imperfect hashing?
    - Passing indices instead of ids from a screen to it's associated ViewModel may be more buggy than simply passing ids.
        - The idea of using indices was that the UI doesn't need to know about a database ID, but maybe it is worth the trade for stability?
    - The ML Kit model does not actually install with the application or even after the application is installed. It seems to only attempt to install by either an attempted use or an explicit call to installation.
    - Error with no known ill effect in AddArticleScreen
        - The following error occurs twice EVERY time:
            Failed to get service from broker. java.lang.SecurityException: Unknown calling package name 'com.google.android.gms'.
        - Seems to be a known problem with Google Play Services?
QoL:
    - Preserve backstack between top level destinations
Settings Screen:
    - Export All Data
    - Rate & Review in-app
Performance:
    - Investigate any performance issues from pre-emptively dispatching to IO for file writing operations.
        - Potential areas:
            - ArticleDetailViewModel.exportArticle()
                - Tracing shows that exporting takes ~1.6s and 1.44s of this is from Bitmap.compress()
            - AddArticleViewModel.onSave()
                - Tracing/System.nanoTime() shows that Bitmap.compress() is taking ~3.5-5.1s (depends on the image)
                - Reduces to ~.5s by changing compression from WebP lossless to WebP lossy 100% quality
            - In both the examples above, maybe compress on Default and *only* write to a file on IO
    - EnsemblesScreen
        - Get all article thumbnails with each ensemble using indices
    - There is potential to highly reduce the storage and transferring of filenames from the database to UI
        - thumbnails and full image both share the bulk of the filename with the only difference being the suffix "_full" and "_thumb"
            - why store this name essentially twice?
                - one reason is obviously the freedom to change these filenames in the future
        - Filenames are generated from a timestamp. This timestamp could be a simple Long
            - Very easy to pass around. However, requires that SimpleDateFormat().format() be run potentially everytime a photo is accessed and at least the first time.
            - Not that wild to implement given the current LazyUriStrings implementation in this project
        - Summary: There is the potential to store both the thumbnail and full image filenames as a single Long value in the database
            - Benefits:
                - less storage/mem space
                - simplified transferring data being as simple as a Long or array of Longs
            - Drawbacks:
                - less flexibility for changing the naming scheme of files in the future
                - there is a tradeoff of having to reconstruct a filename string at runtime which is bottlenecked by whatever the performance of SimpleDateFormat().format() is

// Unknowns
Aesthetic Questions:
    - When to use Toasts vs. Snackbar vs. Notification?
        - Toasts
            - ugliest but simplest and fairly non-intrusive
            - Does *not* allow the user to perform an action in response (unlike Snackbar or Notification)
        - Snackbar
            - Prettiest but the most intrusive to the app's UI
                - Can often hide floating action or other clickable UI items
                    - Buttons could surely respond to the Snackbar visibility, but moving buttons around one of the greatest sins in good UI
                - Can contain a "dismiss" button, which can reduce intrusive-ness
            - in some cases, may even delay screen transitions (No thank you)
        - Notification
            - the most annoying but least intrusive to the app's UI
            - the most intrusive to the user's overall device experience
            - Silent with no badge on app icon allows notifications to be a lot less annoying
            - Can be turned off by the user (good and bad)

Accessibility:
    - Icon / Image content description
        - Research what kind of descriptions are desired for accessibility services? Describe the form only or function as well?
            - If form, app icons can be localized to a single file with content descriptions instead of writing descriptions per Icon usage
            - https://m3.material.io/foundations/content-design/alt-text
                - If an image or icon can be removed with no information lost, it is considered decorative and doesn't need an alt text
                - Describe context and overall meaning instead of focusing in on the details.
                    - In Merlinsbag, if the idea is showing us capturing a photograph of a t-shirt, there is no need to mention the photographers feet in the picture
                - 140 characters is considered the general maximum length
                - If image or icon of a dog, do not say "image of a dog" or "icon of a dog", just say "a dog"
                    - although it may be helpful to describe a more specific type of image (ex: graph, chart, headshot, etc.)
                - alt text can also be a place for creative expressions

Under utilized functionality
    - LazyColumn: stickyHeader items