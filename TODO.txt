// TODO
Database work:
    - Full text search
        - Room database @Fts3/@Fts4
            - https://developer.android.com/training/data-storage/room/defining-data#fts
            - Potentially create separate tables specifically for text search, as demonstrated here:
                https://github.com/android/nowinandroid/tree/afad1b9ac7e3d5efc798e786bd6548229a55735c/core/database/src/main/kotlin/com/google/samples/apps/nowinandroid/core/database/model
    - Indices for commonly queried fields
        - https://developer.android.com/training/data-storage/room/defining-data#column-indexing
    - Paging to improve large data performance
        - https://developer.android.com/training/data-storage/room/accessing-data#paging-integration
    - Separate out database entities and data models used in the app
    - ArticleImageEntity -> ImageEntity
Camera:
    - Setting to allow user to use preferred camera app
    - Selfie camera
    - Camera "feels" slow between clicking the "take picture" button to the AddArticleScreen
    - Delete unused external storage photos? Change to internal storage directory that gets cleared?
Add Article:
    - ML Kit: Image labelling
    - Primary / Secondary color classifications?
    - Thumbnail sizes could be better determined.
        - In examples used in this project, the coat is a lot smaller than the jacket.
            - Ideally, subjects with similar aspect ratios should have similar sizes
        - Although... the articles currently fit well within an ensemble.
    - Use custom layout for AddArticleControls
Ensembles:
    - Add Ensemble Dialog
        - Tags?
    - Search
    - Sort
Article Detail:
    - Swipe between items in current scope
        - HorizontalPager?
        - Transfer current list context from one screen into ArticleDetailViewmodel
            - Context being essentially filters of any kind, most notably tags/ensembles
Features:
    - Export data
        - Individual items
        - All items
Multiple Form Factor Support:
    - AddArticlesScreen [COMPLETED]
    - Navigation Drawer / Navigation Rail
Articles:
    - thumbnails with random "shimmer"/"rotation"
Accessibility:
    - Icon content description
        - Research what kind of descriptions are desired for accessibility services? Describe the form only or function as well?
            - If form, app icons can be localized to a single file with content descriptions instead of writing descriptions per Icon usage
Architecture:
    - Consolidate mutable states into UIStates, mostly in viewmodels and listened to in Screens
    - Replace LiveData with StateFlow/MutableStateFlow
App-wide UI:
    - EdgeToEdge
    - Explicit to Screen animations
Splash screen
    - androidx.core:core-splashscreen
        installSplashScreen()
        splashScreen.setKeepOnScreenCondition { when (uiState) { Loading -> true is Success -> false } }
Build time:
    - Look into removing AsyncImage since images are local
Tooling:
    - UI Catalog
Performance:
    - Bottom bar navigation
        - bug: transition to articles from bottom bar hiccups a little
    - Logs report skipping frames:
        - Startup in articles screen up to 120 frames total!
Best Practices:
    - Many composables have onClick lambdas as function parameters. In this project, those parameters
        have been assigned default values simply to make Composable @Preview easier. This feels like
        testing affecting an implementation. For the most part, the exposed lambdas on custom Compose
        components should always be supplied.
        - Is this actually a problem?
            - Probably, because compilation errors are invaluable when using an API wrong
        - Solutions?
            - Simply supply void lambdas every time in @Preview functions
            - If there are lots of previews using the same function, simply create and re-use a function
                that sets these defaults for us.
