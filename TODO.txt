// TODO
Database:
    - Paging to improve large data performance
        - https://developer.android.com/training/data-storage/room/accessing-data#paging-integration
    - remove app modules dependency on Database models?
Add Article:
    - ML Kit: Image labelling
    - Primary / Secondary color classifications?
Ensembles:
    - Composite ensembles?
        - Exclusive: #Goth & #Tops
        - Inclusive: #HealthGoth | #Hiking
Features:
    - Collage
    - Share!
Multiple Form Factor Support:
    - AddArticlesScreen [COMPLETED]
    - NavigationRail [COMPLETED]
    - NavRail [COMPLETED]
    - Ensembles List / Ensemble Detail for tablets
Articles:
    - thumbnails with random "shimmer"/"rotation"
App-wide UI:
    - Explicit to Screen animations
Tooling:
    - UI Catalog
Export:
    - It seems like exporting image as a PNG is large (5MB+ per article in some cases!), investigate lowering this value.
    - Loading indicator? Or is disabled export button enough?
Bugs:
    - Out of Memory (OOM) crash when processing an image in AddArticleScreen
        - stems from java.nio.HeapFloatBuffer when called in com.google.mlkit.vision.segmentation.subject.internal
        - Seen when running application on an Motorola Z Play, 3GB RAM, API 26
        - settings android:largeHeap="true" in manifest has slightly alleviated the problem
        - could it be linked to the memory size of thumbnails on the articles screen?
    - During screen transitions, the previous screen is still interactable?
        - UPDATE: Not able to reproduce outside of debug build. Will verify at some random point in future before bug is removed.
    - FTS is imperfect sometimes shows irrelevant results on first character
        - Reproduce: Type one random character in search bar. Sometimes show unrelated results. Have seen unrelated results on pairs of 2 characters.
        - Maybe expected due to efficient imperfect hashing?
Settings Screen:
    - Export All Data
Aesthetics:
    - placeholder shimmer could use a little work
Performance:
    - Investigate any performance issues from pre-emptively dispatching to IO for file writing operations.
        - Potential areas:
            - ArticleDetailViewModel.exportArticle()
                - Tracing shows that exporting takes ~1.6s and 1.44s of this is from Bitmap.compress()
            - AddArticleViewModel.onSave()
                - Tracing/System.nanoTime() shows that Bitmap.compress() is taking ~3.5-5.1s (depends on the image)
                - Reduces to ~.5s by changing compression from WebP lossless to WebP lossy 100% quality
            - In both the examples above, maybe compress on Default and *only* write to a file on IO

// Unknowns
Aesthetic Questions:
    - When to use Toasts vs. Snackbar vs. Notification?
        - Toasts
            - ugliest but simplest and fairly non-intrusive
            - Does *not* allow the user to perform an action in response (unlike Snackbar or Notification)
        - Snackbar
            - Prettiest but the most intrusive to the app's UI
                - Can often hide floating action or other clickable UI items
                    - Buttons could surely respond to the Snackbar visibility, but moving buttons around one of the greatest sins in good UI
                - Can contain a "dismiss" button, which can reduce intrusive-ness
            - in some cases, may even delay screen transitions (No thank you)
        - Notification
            - the most annoying but least intrusive to the app's UI
            - the most intrusive to the user's overall device experience
            - Silent with no badge on app icon allows notifications to be a lot less annoying
            - Can be turned off by the user (good and bad)

Accessibility:
    - Icon / Image content description
        - Research what kind of descriptions are desired for accessibility services? Describe the form only or function as well?
            - If form, app icons can be localized to a single file with content descriptions instead of writing descriptions per Icon usage
            - https://m3.material.io/foundations/content-design/alt-text
                - If an image or icon can be removed with no information lost, it is considered decorative and doesn't need an alt text
                - Describe context and overall meaning instead of focusing in on the details.
                    - In Merlinsbag, if the idea is showing us capturing a photograph of a t-shirt, there is no need to mention the photographers feet in the picture
                - 140 characters is considered the general maximum length
                - If image or icon of a dog, do not say "image of a dog" or "icon of a dog", just say "a dog"
                    - although it may be helpful to describe a more specific type of image (ex: graph, chart, headshot, etc.)
                - alt text can also be a place for creative expressions
