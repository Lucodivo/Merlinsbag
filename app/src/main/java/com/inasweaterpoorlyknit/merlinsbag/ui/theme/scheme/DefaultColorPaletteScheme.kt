package com.inasweaterpoorlyknit.merlinsbag.ui.theme.scheme

import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import com.inasweaterpoorlyknit.merlinsbag.R

object DefaultColorPaletteScheme: ColorPaletteScheme{
  override val nameStrRes: Int = R.string.system_dynamic
  private val defaultLightScheme = lightColorScheme()
  private val defaultDarkScheme = darkColorScheme()

  override val primaryLight = defaultLightScheme.primary
  override val onPrimaryLight = defaultLightScheme.onPrimary
  override val primaryContainerLight = defaultLightScheme.primaryContainer
  override val onPrimaryContainerLight = defaultLightScheme.onPrimaryContainer
  override val secondaryLight = defaultLightScheme.secondary
  override val onSecondaryLight = defaultLightScheme.onSecondary
  override val secondaryContainerLight = defaultLightScheme.secondaryContainer
  override val onSecondaryContainerLight = defaultLightScheme.onSecondaryContainer
  override val tertiaryLight = defaultLightScheme.tertiary
  override val onTertiaryLight = defaultLightScheme.onTertiary
  override val tertiaryContainerLight = defaultLightScheme.tertiaryContainer
  override val onTertiaryContainerLight = defaultLightScheme.onTertiaryContainer
  override val errorLight = defaultLightScheme.error
  override val onErrorLight = defaultLightScheme.onError
  override val errorContainerLight = defaultLightScheme.errorContainer
  override val onErrorContainerLight = defaultLightScheme.onErrorContainer
  override val backgroundLight = defaultLightScheme.background
  override val onBackgroundLight = defaultLightScheme.onBackground
  override val surfaceLight = defaultLightScheme.surface
  override val onSurfaceLight = defaultLightScheme.onSurface
  override val surfaceVariantLight = defaultLightScheme.surfaceVariant
  override val onSurfaceVariantLight = defaultLightScheme.onSurfaceVariant
  override val outlineLight = defaultLightScheme.outline
  override val outlineVariantLight = defaultLightScheme.outlineVariant
  override val scrimLight = defaultLightScheme.scrim
  override val inverseSurfaceLight = defaultLightScheme.inverseSurface
  override val inverseOnSurfaceLight = defaultLightScheme.inverseOnSurface
  override val inversePrimaryLight = defaultLightScheme.inversePrimary
  override val surfaceDimLight = defaultLightScheme.surfaceDim
  override val surfaceBrightLight = defaultLightScheme.surfaceBright
  override val surfaceContainerLowestLight = defaultLightScheme.surfaceContainerLowest
  override val surfaceContainerLowLight = defaultLightScheme.surfaceContainerLow
  override val surfaceContainerLight = defaultLightScheme.surfaceContainer
  override val surfaceContainerHighLight = defaultLightScheme.surfaceContainerHigh
  override val surfaceContainerHighestLight = defaultLightScheme.surfaceContainerHighest

  override val primaryLightMediumContrast = defaultLightScheme.primary
  override val onPrimaryLightMediumContrast = defaultLightScheme.onPrimary
  override val primaryContainerLightMediumContrast = defaultLightScheme.primaryContainer
  override val onPrimaryContainerLightMediumContrast = defaultLightScheme.onPrimaryContainer
  override val secondaryLightMediumContrast = defaultLightScheme.secondary
  override val onSecondaryLightMediumContrast = defaultLightScheme.onSecondary
  override val secondaryContainerLightMediumContrast = defaultLightScheme.secondaryContainer
  override val onSecondaryContainerLightMediumContrast = defaultLightScheme.onSecondaryContainer
  override val tertiaryLightMediumContrast = defaultLightScheme.tertiary
  override val onTertiaryLightMediumContrast = defaultLightScheme.onTertiary
  override val tertiaryContainerLightMediumContrast = defaultLightScheme.tertiaryContainer
  override val onTertiaryContainerLightMediumContrast = defaultLightScheme.onTertiaryContainer
  override val errorLightMediumContrast = defaultLightScheme.error
  override val onErrorLightMediumContrast = defaultLightScheme.onError
  override val errorContainerLightMediumContrast = defaultLightScheme.errorContainer
  override val onErrorContainerLightMediumContrast = defaultLightScheme.onErrorContainer
  override val backgroundLightMediumContrast = defaultLightScheme.background
  override val onBackgroundLightMediumContrast = defaultLightScheme.onBackground
  override val surfaceLightMediumContrast = defaultLightScheme.surface
  override val onSurfaceLightMediumContrast = defaultLightScheme.onSurface
  override val surfaceVariantLightMediumContrast = defaultLightScheme.surfaceVariant
  override val onSurfaceVariantLightMediumContrast = defaultLightScheme.onSurfaceVariant
  override val outlineLightMediumContrast = defaultLightScheme.outline
  override val outlineVariantLightMediumContrast = defaultLightScheme.outlineVariant
  override val scrimLightMediumContrast = defaultLightScheme.scrim
  override val inverseSurfaceLightMediumContrast = defaultLightScheme.inverseSurface
  override val inverseOnSurfaceLightMediumContrast = defaultLightScheme.inverseOnSurface
  override val inversePrimaryLightMediumContrast = defaultLightScheme.inversePrimary
  override val surfaceDimLightMediumContrast = defaultLightScheme.surfaceDim
  override val surfaceBrightLightMediumContrast = defaultLightScheme.surfaceBright
  override val surfaceContainerLowestLightMediumContrast = defaultLightScheme.surfaceContainerLowest
  override val surfaceContainerLowLightMediumContrast = defaultLightScheme.surfaceContainerLow
  override val surfaceContainerLightMediumContrast = defaultLightScheme.surfaceContainer
  override val surfaceContainerHighLightMediumContrast = defaultLightScheme.surfaceContainerHigh
  override val surfaceContainerHighestLightMediumContrast = defaultLightScheme.surfaceContainerHighest

  override val primaryLightHighContrast = defaultLightScheme.primary
  override val onPrimaryLightHighContrast = defaultLightScheme.onPrimary
  override val primaryContainerLightHighContrast = defaultLightScheme.primaryContainer
  override val onPrimaryContainerLightHighContrast = defaultLightScheme.onPrimaryContainer
  override val secondaryLightHighContrast = defaultLightScheme.secondary
  override val onSecondaryLightHighContrast = defaultLightScheme.onSecondary
  override val secondaryContainerLightHighContrast = defaultLightScheme.secondaryContainer
  override val onSecondaryContainerLightHighContrast = defaultLightScheme.onSecondaryContainer
  override val tertiaryLightHighContrast = defaultLightScheme.tertiary
  override val onTertiaryLightHighContrast = defaultLightScheme.onTertiary
  override val tertiaryContainerLightHighContrast = defaultLightScheme.tertiaryContainer
  override val onTertiaryContainerLightHighContrast = defaultLightScheme.onTertiaryContainer
  override val errorLightHighContrast = defaultLightScheme.error
  override val onErrorLightHighContrast = defaultLightScheme.onError
  override val errorContainerLightHighContrast = defaultLightScheme.errorContainer
  override val onErrorContainerLightHighContrast = defaultLightScheme.onErrorContainer
  override val backgroundLightHighContrast = defaultLightScheme.background
  override val onBackgroundLightHighContrast = defaultLightScheme.onBackground
  override val surfaceLightHighContrast = defaultLightScheme.surface
  override val onSurfaceLightHighContrast = defaultLightScheme.onSurface
  override val surfaceVariantLightHighContrast = defaultLightScheme.surfaceVariant
  override val onSurfaceVariantLightHighContrast = defaultLightScheme.onSurfaceVariant
  override val outlineLightHighContrast = defaultLightScheme.outline
  override val outlineVariantLightHighContrast = defaultLightScheme.outlineVariant
  override val scrimLightHighContrast = defaultLightScheme.scrim
  override val inverseSurfaceLightHighContrast = defaultLightScheme.inverseSurface
  override val inverseOnSurfaceLightHighContrast = defaultLightScheme.inverseOnSurface
  override val inversePrimaryLightHighContrast = defaultLightScheme.inversePrimary
  override val surfaceDimLightHighContrast = defaultLightScheme.surfaceDim
  override val surfaceBrightLightHighContrast = defaultLightScheme.surfaceBright
  override val surfaceContainerLowestLightHighContrast = defaultLightScheme.surfaceContainerLowest
  override val surfaceContainerLowLightHighContrast = defaultLightScheme.surfaceContainerLow
  override val surfaceContainerLightHighContrast = defaultLightScheme.surfaceContainer
  override val surfaceContainerHighLightHighContrast = defaultLightScheme.surfaceContainerHigh
  override val surfaceContainerHighestLightHighContrast = defaultLightScheme.surfaceContainerHighest

  override val primaryDark = defaultDarkScheme.primary
  override val onPrimaryDark = defaultDarkScheme.onPrimary
  override val primaryContainerDark = defaultDarkScheme.primaryContainer
  override val onPrimaryContainerDark = defaultDarkScheme.onPrimaryContainer
  override val secondaryDark = defaultDarkScheme.secondary
  override val onSecondaryDark = defaultDarkScheme.onSecondary
  override val secondaryContainerDark = defaultDarkScheme.secondaryContainer
  override val onSecondaryContainerDark = defaultDarkScheme.onSecondaryContainer
  override val tertiaryDark = defaultDarkScheme.tertiary
  override val onTertiaryDark = defaultDarkScheme.onTertiary
  override val tertiaryContainerDark = defaultDarkScheme.tertiaryContainer
  override val onTertiaryContainerDark = defaultDarkScheme.onTertiaryContainer
  override val errorDark = defaultDarkScheme.error
  override val onErrorDark = defaultDarkScheme.onError
  override val errorContainerDark = defaultDarkScheme.errorContainer
  override val onErrorContainerDark = defaultDarkScheme.onErrorContainer
  override val backgroundDark = defaultDarkScheme.background
  override val onBackgroundDark = defaultDarkScheme.onBackground
  override val surfaceDark = defaultDarkScheme.surface
  override val onSurfaceDark = defaultDarkScheme.onSurface
  override val surfaceVariantDark = defaultDarkScheme.surfaceVariant
  override val onSurfaceVariantDark = defaultDarkScheme.onSurfaceVariant
  override val outlineDark = defaultDarkScheme.outline
  override val outlineVariantDark = defaultDarkScheme.outlineVariant
  override val scrimDark = defaultDarkScheme.scrim
  override val inverseSurfaceDark = defaultDarkScheme.inverseSurface
  override val inverseOnSurfaceDark = defaultDarkScheme.inverseOnSurface
  override val inversePrimaryDark = defaultDarkScheme.inversePrimary
  override val surfaceDimDark = defaultDarkScheme.surfaceDim
  override val surfaceBrightDark = defaultDarkScheme.surfaceBright
  override val surfaceContainerLowestDark = defaultDarkScheme.surfaceContainerLowest
  override val surfaceContainerLowDark = defaultDarkScheme.surfaceContainerLow
  override val surfaceContainerDark = defaultDarkScheme.surfaceContainer
  override val surfaceContainerHighDark = defaultDarkScheme.surfaceContainerHigh
  override val surfaceContainerHighestDark = defaultDarkScheme.surfaceContainerHighest

  override val primaryDarkMediumContrast = defaultDarkScheme.primary
  override val onPrimaryDarkMediumContrast = defaultDarkScheme.onPrimary
  override val primaryContainerDarkMediumContrast = defaultDarkScheme.primaryContainer
  override val onPrimaryContainerDarkMediumContrast = defaultDarkScheme.onPrimaryContainer
  override val secondaryDarkMediumContrast = defaultDarkScheme.secondary
  override val onSecondaryDarkMediumContrast = defaultDarkScheme.onSecondary
  override val secondaryContainerDarkMediumContrast = defaultDarkScheme.secondaryContainer
  override val onSecondaryContainerDarkMediumContrast = defaultDarkScheme.onSecondaryContainer
  override val tertiaryDarkMediumContrast = defaultDarkScheme.tertiary
  override val onTertiaryDarkMediumContrast = defaultDarkScheme.onTertiary
  override val tertiaryContainerDarkMediumContrast = defaultDarkScheme.tertiaryContainer
  override val onTertiaryContainerDarkMediumContrast = defaultDarkScheme.onTertiaryContainer
  override val errorDarkMediumContrast = defaultDarkScheme.error
  override val onErrorDarkMediumContrast = defaultDarkScheme.onError
  override val errorContainerDarkMediumContrast = defaultDarkScheme.errorContainer
  override val onErrorContainerDarkMediumContrast = defaultDarkScheme.onErrorContainer
  override val backgroundDarkMediumContrast = defaultDarkScheme.background
  override val onBackgroundDarkMediumContrast = defaultDarkScheme.onBackground
  override val surfaceDarkMediumContrast = defaultDarkScheme.surface
  override val onSurfaceDarkMediumContrast = defaultDarkScheme.onSurface
  override val surfaceVariantDarkMediumContrast = defaultDarkScheme.surfaceVariant
  override val onSurfaceVariantDarkMediumContrast = defaultDarkScheme.onSurfaceVariant
  override val outlineDarkMediumContrast = defaultDarkScheme.outline
  override val outlineVariantDarkMediumContrast = defaultDarkScheme.outlineVariant
  override val scrimDarkMediumContrast = defaultDarkScheme.scrim
  override val inverseSurfaceDarkMediumContrast = defaultDarkScheme.inverseSurface
  override val inverseOnSurfaceDarkMediumContrast = defaultDarkScheme.inverseOnSurface
  override val inversePrimaryDarkMediumContrast = defaultDarkScheme.inversePrimary
  override val surfaceDimDarkMediumContrast = defaultDarkScheme.surfaceDim
  override val surfaceBrightDarkMediumContrast = defaultDarkScheme.surfaceBright
  override val surfaceContainerLowestDarkMediumContrast = defaultDarkScheme.surfaceContainerLowest
  override val surfaceContainerLowDarkMediumContrast = defaultDarkScheme.surfaceContainerLow
  override val surfaceContainerDarkMediumContrast = defaultDarkScheme.surfaceContainer
  override val surfaceContainerHighDarkMediumContrast = defaultDarkScheme.surfaceContainerHigh
  override val surfaceContainerHighestDarkMediumContrast = defaultDarkScheme.surfaceContainerHighest

  override val primaryDarkHighContrast = defaultDarkScheme.primary
  override val onPrimaryDarkHighContrast = defaultDarkScheme.onPrimary
  override val primaryContainerDarkHighContrast = defaultDarkScheme.primaryContainer
  override val onPrimaryContainerDarkHighContrast = defaultDarkScheme.onPrimaryContainer
  override val secondaryDarkHighContrast = defaultDarkScheme.secondary
  override val onSecondaryDarkHighContrast = defaultDarkScheme.onSecondary
  override val secondaryContainerDarkHighContrast = defaultDarkScheme.secondaryContainer
  override val onSecondaryContainerDarkHighContrast = defaultDarkScheme.onSecondaryContainer
  override val tertiaryDarkHighContrast = defaultDarkScheme.tertiary
  override val onTertiaryDarkHighContrast = defaultDarkScheme.onTertiary
  override val tertiaryContainerDarkHighContrast = defaultDarkScheme.tertiaryContainer
  override val onTertiaryContainerDarkHighContrast = defaultDarkScheme.onTertiaryContainer
  override val errorDarkHighContrast = defaultDarkScheme.error
  override val onErrorDarkHighContrast = defaultDarkScheme.onError
  override val errorContainerDarkHighContrast = defaultDarkScheme.errorContainer
  override val onErrorContainerDarkHighContrast = defaultDarkScheme.onErrorContainer
  override val backgroundDarkHighContrast = defaultDarkScheme.background
  override val onBackgroundDarkHighContrast = defaultDarkScheme.onBackground
  override val surfaceDarkHighContrast = defaultDarkScheme.surface
  override val onSurfaceDarkHighContrast = defaultDarkScheme.onSurface
  override val surfaceVariantDarkHighContrast = defaultDarkScheme.surfaceVariant
  override val onSurfaceVariantDarkHighContrast = defaultDarkScheme.onSurfaceVariant
  override val outlineDarkHighContrast = defaultDarkScheme.outline
  override val outlineVariantDarkHighContrast = defaultDarkScheme.outlineVariant
  override val scrimDarkHighContrast = defaultDarkScheme.scrim
  override val inverseSurfaceDarkHighContrast = defaultDarkScheme.inverseSurface
  override val inverseOnSurfaceDarkHighContrast = defaultDarkScheme.inverseOnSurface
  override val inversePrimaryDarkHighContrast = defaultDarkScheme.inversePrimary
  override val surfaceDimDarkHighContrast = defaultDarkScheme.surfaceDim
  override val surfaceBrightDarkHighContrast = defaultDarkScheme.surfaceBright
  override val surfaceContainerLowestDarkHighContrast = defaultDarkScheme.surfaceContainerLowest
  override val surfaceContainerLowDarkHighContrast = defaultDarkScheme.surfaceContainerLow
  override val surfaceContainerDarkHighContrast = defaultDarkScheme.surfaceContainer
  override val surfaceContainerHighDarkHighContrast = defaultDarkScheme.surfaceContainerHigh
  override val surfaceContainerHighestDarkHighContrast = defaultDarkScheme.surfaceContainerHighest
}
